<!DOCTYPE html>
<html>

<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Reporte diario - Cuenca del Plata - INA - SLHi</title>
  <meta name="description"
    content="Es un organismo científico tecnológico descentralizado que tiene por objetivo satisfacer los requerimientos de estudio,    investigación, desarrollo y prestación de servicios especializados en el campo del aprovechamiento y preservación del agua.    Depende de la Secretaría de Infraestructura y Política Hídrica de la Nación,    del [Ministerio de Obras Públicas](https://www.argentina.gob.ar/obras-publicas) de la República Argentina.">
  <meta name="keywords"
    content="instituto nacional del agua, INA, ina, subsecretaria de recursos hidricos, laboratorio de hidraulica,    direccion de servicios hidrologicos, centro de tecnologia del uso del agua, centro regional litoral, crl, centro de la region semiarida, cirsa,    centro de economia legislacion y administracion del agua, cela, subgerencia laboratorio de calidad de aguas, subgerencia hidrologia aplicada, delta parana, inundaciones urbanas, productos de emergencia, analisis de agua, alerta hidrologico, monitoreo rio parana,   cuenca del plata, investigaciones en riego y drenaje, calidad de aguas, canal de panama, hidraulica, ingenieria hidraulica, hidrologia superficial,    hidrologia subterranea, programa de investigaciones en hidroquimica, red hidrometeorologica, area pedemontana gran mendoza,   calidad de aguas e impacto ambiental">
  <meta name="author" content="Instituto Nacional del Agua">
  <link rel="shortcut icon" href="https://www.ina.gov.ar/img/favicon.ico">
  <!-- Nav and address bar color -->
  <meta name="theme-color" content="#0072b8">
  <meta name="msapplication-navbutton-color" content="#0072b8">
  <meta name="apple-mobile-web-app-status-bar-style" content="#0072b8">
  <meta property="og:url" content="https://www.argentina.gob.ar/ina/">
  <meta property="og:type" content="article">
  <meta property="og:title" content="Instituto Nacional del Agua (INA) - Subgerencia Laboratorio de Hidrología">
  <meta property="og:description"
    content="Es un organismo científico tecnológico descentralizado que tiene por objetivo satisfacer los requerimientos de estudio,    investigación, desarrollo y prestación de servicios especializados en el campo del aprovechamiento y preservación del agua.    Depende de la Secretaría de Infraestructura y Política Hídrica de la Nación,    del [Ministerio de Obras Públicas](https://www.argentina.gob.ar/obras-publicas) de la República Argentina.">
  <meta property="og:image" content="https://www.ina.gob.ar/img/Logo_ina_chico.png">
  <meta property="og:locale" content="es_AR">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:title" content="Instituto Nacional del Agua (INA) - Subgerencia Laboratorio de Hidrología">
  <meta name="twitter:description"
    content="Es un organismo científico tecnológico descentralizado que tiene por objetivo satisfacer los requerimientos de estudio,    investigación, desarrollo y prestación de servicios especializados en el campo del aprovechamiento y preservación del agua.    Depende de la Secretaría de Infraestructura y Política Hídrica de la Nación,    del [Ministerio de Obras Públicas](https://www.argentina.gob.ar/obras-publicas) de la República Argentina.">
  <meta name="twitter:image" content="https://www.ina.gob.ar/img/Logo_ina_chico.png">
  <!-- <link rel="stylesheet" href="styles/bootstrap.min.css"
    integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous"> -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="styles/font-awesome.min.css">
  <link rel="stylesheet" href="styles/poncho.min.css">
  <!-- <link rel="stylesheet" href="/poncho/dist/css/argentina.css"> -->
  <link rel="stylesheet" href="styles/icono-arg.css">
  <link rel="stylesheet" href="styles/ina.css">
  <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
  <!--[if lt IE 9]>
          <script src="http://argob.github.io/poncho/js/html5shiv.js"></script>
          <script src="http://argob.github.io/poncho/js/respond.min.js"></script>
      <![endif]-->
  <script src="js/jquery.min.js"></script>
  <script src="js/bootstrap.min.js"
    integrity="sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd"
    crossorigin="anonymous"></script>
  <link href="styles/owl.carousel.css" type="text/css" rel="stylesheet" media="screen">
  <script src="js/owl.carousel.min.js" type="text/javascript"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link href="my_styles/reporte.css" type="text/css" rel="stylesheet" media="all">
  <style>  
    .print-header {
      display: none;
    }

    .modal.fade.show {
      opacity: 1 !important;
      display: block !important;
    }

    .modal-dialog.modal-sm {
      max-width: 300px;
    }

    div.as-link {
      color: #0d6efd;            /* Bootstrap link blue */
      text-decoration: none;
      cursor: pointer;
      display: inline;           /* inline so it behaves like a link */
    }

    div.as-link:hover {
      text-decoration: underline;
    }

    html, body {
      margin: 0;
      padding: 0;
      min-height: 100%;
      /* background-color: #121212; /* Dark sides */
    }

    
    #report_container {
      /* width: 794px; */
      background-color: #ffffff; /* main content background */
      /* min-height: 100vh; */
      /* padding: 2rem; */
      /* box-shadow: 0 0 10px rgba(0, 0, 0, 0.3); */
      box-sizing: border-box;
    }

    .accordion {
      width: 100%;
      border: 1px solid #ccc;
      border-radius: 8px;
      margin-bottom: 10px;
    }

    .accordion-header {
      background: #f0f0f0;
      cursor: pointer;
      padding: 10px 15px;
      font-weight: bold;
      border-bottom: 1px solid #ccc;
    }

    .accordion-content {
      display: none;
      padding: 10px;
      text-align: center;
    }

    .accordion-content img {
      max-width: 100%;
      height: auto;
      border-radius: 4px;
    }

    .accordion.open .accordion-content {
      display: block;
    }

    a.hidden {
      display: none;
    }

    @media (min-width: 1200px) {
      #report_container {
        width: 1170px;
      }
    }
    
    @media print {

      .print-header {
        position: absolute;
        top: -5mm;
        left: 0;
        display: block;
        width: 100%;
        height: 40mm;
        text-align: center;
        z-index: 999;
      }

      .print-header img {
        width: 714px;
      }

      body {
        margin-top: 45mm; /* Add space so content doesn't overlap header */
      }
      html, body {
        background-color: #ffffff;
      }

      /* #report_container {
        width: 714px; 
        padding: 0rem;
      } */

      .fa-exclamation-triangle::before {
        color: inherit !important;
      }

      .accordion .accordion-content {
        display: block;
      }

      div.paragraph {
          width: 714px;
      }

      table.tabla-hidro {
        page-break-inside: avoid;
      }

      .accordion-header {
        display: none;
      }

      #report_container img.plot {
        width: 642px;
      }

      div.pdf_download {
        display: none;
      }

      #mapa-condicion {
        page-break-inside: avoid;
        break-inside: avoid;
        page-break-before: auto;
        break-before: auto;
        width: 330px;
        height: 330px;
      }

      #report_container .ol-legend img {
        max-width: 125px;
      }
    }

    #landscape-warning {
      display: none;
      position: fixed;
      z-index: 9999;
      top: 0; left: 0; right: 0; bottom: 0;
      background: #000;
      color: #fff;
      text-align: center;
      padding-top: 40vh;
      font-size: 1.5rem;
      max-width: 100vw;
    }

    @media screen and (orientation: portrait) {
      #landscape-warning.enabled { display: block; }
      /* #report_container { display: none; } */
    }   

  </style>
</head>
<body>
  <div id="landscape-warning" class="{{landscape_warning_class}}">Por favor rote su dispositivo</div>
  <div class="print-header">
    <img src="img/membrete-2025_con_logo_slhi.jpg" alt="Instituto Nacional del Agua" />
  </div>
  <div id="report_container">{{{html_content}}}</div>
  <!-- MODAL -->
  <div class="modal fade" id="hidrolinksModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-sm"> <!-- small modal -->
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Barranqueras</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body d-flex flex-column text-center gap-2">
          <a href="#hidrograma-19" id="hidrograma-link" class="btn btn-link" onclick="closeModal()">hidrograma</a>
          <a href="https://alerta.ina.gob.ar/a5/secciones?seriesId=19" target="_blank" id="secciones-link" class="btn btn-link" onclick="closeModal()">visualizador (en pestaña nueva)</a>
        </div>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@latest/ol.css" />
  <script src="https://cdn.jsdelivr.net/npm/ol@latest/dist/ol.js"></script>
  <script>
    var map;
    window.onload = function() {
      // fetch("saved.html")
      //  .then(response => response.text())
      //  .then(html => {
      //    document.getElementById('report_container').innerHTML = html;
        document.querySelectorAll('.accordion-header').forEach(header => {
          header.addEventListener('click', () => {
            header.parentElement.classList.toggle('open');
          });
        });

        // document.querySelector(".mapa_caudales").style.display = "none"
        document.getElementById("mapa-row").style.display = "flex"
        map = load_map("mapa-condicion")

      // });
    }
    function closeModal() {
      const modalEl = document.getElementById('hidrolinksModal');
      const modal = bootstrap.Modal.getInstance(modalEl);
      modal.hide();
    }
    const hidrolinksModal = document.getElementById('hidrolinksModal');
    hidrolinksModal.addEventListener('show.bs.modal', function (event) {
      const trigger = event.relatedTarget;
      const title = trigger.getAttribute('data-title');
      const id = trigger.getAttribute('data-id');
      const seccionesurl = trigger.getAttribute('data-seccionesurl');

      hidrolinksModal.querySelector('.modal-title').textContent = title;
      hidrolinksModal.querySelector('#hidrograma-link').setAttribute("href",`#hidrograma-${id}`)
      const hidrograma = document.getElementById(`hidrograma-${id}`)
      if(hidrograma) {
        hidrolinksModal.querySelector('#hidrograma-link').classList.remove("hidden")
      } else {
        hidrolinksModal.querySelector('#hidrograma-link').classList.add("hidden")
      }
      hidrolinksModal.querySelector('#secciones-link').setAttribute("href", seccionesurl);
    });
    const hidrograma_link = hidrolinksModal.querySelector('#hidrograma-link')
    hidrograma_link.addEventListener("click",(event)=>{
      event.preventDefault()
      const hidrograma_id = event.target.getAttribute("href").replace("#","")
      const hidrograma = document.getElementById(hidrograma_id)
      if(hidrograma) {
        hidrograma.parentElement.parentElement.classList.add("open")
        hidrograma.parentElement.parentElement.scrollIntoView({ behavior: 'smooth', block: 'start' })
      } 
    });
    
    // MAPA CONDICION
    
    const baseLayer = new ol.layer.Tile({
      source: new ol.source.XYZ({ url: 'https://wms.ign.gob.ar/geoserver/gwc/service/tms/1.0.0/capabaseargenmap@EPSG:3857@png/{z}/{x}/{-y}.png'})
    });

    const wmsLayerUrl = "{{geoserver_url}}/wms";

    const wmsLayer = new ol.layer.Tile({
      source: new ol.source.TileWMS({
        url: wmsLayerUrl,
        params: {
          'LAYERS': 'public2:tramos_condicion_params',
          'TILED': true
        },
        serverType: 'geoserver',
        transition: 0
      })
    });

    const estacionId = "{{estacionId}}"

    const estacionesLayerWMS = new ol.layer.Tile({
      source: new ol.source.TileWMS({
        url: "http://localhost:8080/geoserver/wms",
        params: {
          'LAYERS': 'main:ultimas_alturas_con_timeseries',
          'TILED': true,
          'VIEWPARAMS': `redId:10;estacionId:${estacionId}`
        }
      })
    })

    const alturasSource = createVectorSourceFromTable("tabla-alturas")
    const caudalesSource = createVectorSourceFromTable("tabla-caudales")

    const faStyleFunction = function (feature) {
      const condicion = feature.get('status_text');
      const tendencia = feature.get('tendencia');
      const aviso = feature.get('aviso');

      // Choose color and shape based on status
      let fill_color = 'gray';
      let icon_unicode = '\uf111';

      if(condicion) {
        fill_color = getStatusColor(condicion)
      }

      switch(aviso) {
        case 'alerta':
          fill_color = 'yellow';
          icon_unicode = '\uf071';
          break;
        case 'evacuacion':
          fill_color = 'red';
          icon_unicode = '\uf071';
          break;
        default:
          switch(tendencia) {
            case 'crece':
            case 'sube':
              icon_unicode = '\uf35b'
              break;
            case 'baja':
              icon_unicode = '\uf358'
              break;
          }
      }

      return new ol.style.Style({
        text: new ol.style.Text({
          text: icon_unicode,
          font: '900 12px "Font Awesome 6 Free"', // adjust for FA version/weight
          fill: new ol.style.Fill({ color: fill_color }),
          stroke: new ol.style.Stroke({ color: 'black', width: 2 }),
          // backgroundFill: new ol.style.Fill({ color: 'white' }),
          // backgroundStroke: new ol.style.Stroke({ color: 'black', width: 1 }),
          offsetY: 0, // optional: raise the icon
        })
      });
    }
    
    const basicStyle = new ol.style.Style({
      image: new ol.style.Circle({
        radius: 5,
        fill: new ol.style.Fill({ color: 'red' }),
        stroke: new ol.style.Stroke({ color: 'white', width: 1 })
      })
    })

    const alturasLayer = new ol.layer.Vector({
      source: alturasSource,
      style: faStyleFunction
    });

    const caudalesLayer = new ol.layer.Vector({
      source: caudalesSource,
      style: faStyleFunction
    });


    function load_map(target) {
      const map = new ol.Map({
        target: target || 'mapa-condicion',
        layers: [baseLayer, wmsLayer, alturasLayer, caudalesLayer],
        view: new ol.View({
          center: ol.proj.fromLonLat([-58.21, -31.58]),
          zoom: 5,
          projection: 'EPSG:3857'
        }),
        interactions: ol.interaction.defaults.defaults({mouseWheelZoom: false}).extend([
          new ol.interaction.MouseWheelZoom({
            condition: ol.events.condition.platformModifierKeyOnly
          })
        ])
      });

      map.on('pointermove', mapQueryHandler);
      map.on('click', mapQueryHandler);

      return map
    }
         
    let hoverTimer = null;
    let lastPixel = null;

    function mapQueryHandler(e) {

      document.getElementById('map-modal').style.display='none'

      const pixel = e.pixel;

      // Reset if pointer moved
      if (!lastPixel || pixel[0] !== lastPixel[0] || pixel[1] !== lastPixel[1]) {
        lastPixel = pixel;
        if (hoverTimer) clearTimeout(hoverTimer);
        hoverTimer = setTimeout( async () => {

          const feature = map.forEachFeatureAtPixel(pixel, (feature, layer) => {
              if (layer == alturasLayer || layer == caudalesLayer) {
                return feature
              }
            }, {
              hitTolerance: 5 // optional: increases clickable radius
            }
          ) 

          if(feature) {
            // shows point data (estaciones alturas/caudales)
            showMapPopup(feature)
            return
          }

          //else, query lines (tramos)
          await queryWMSLayer(e)

          
        }, 1000); // 1 second still
      }
    }

    function mapPopupContent(response_type, props) {
      const feature_type = (response_type == "tramos") ? "tramo" : "estación" 
      // const condicion = (response_type == "tramo") ? props.condicion : (props.estado && props.estado != "normal") ? props.estado : ""
      var content = `<span style="font-style: italic;">río: </span>${props.rio}<br><span style="font-style: italic;">${feature_type}: </span>${props.nombre}`
      if(props.condicion) {
        content = `${content}<br><strong>${props.condicion}</strong>`
      }
      if(props.aviso && props.aviso != "ok") {
        var aviso_color = "white";
        switch(props.aviso) {
          case 'alerta':
            aviso_color = 'yellow';
            break;
          case 'evacuacion':
            aviso_color = 'red';
            break;
        }
        content = `${content}<br><strong style="background-color: ${aviso_color};">${props.aviso}</strong>`
      }
      return content
    }

    function showMapPopup(feature, response_type="estacion") {
      document.getElementById('map-modal').style.backgroundColor = null
      const props = feature.getProperties();
      console.log(props)
      const content = mapPopupContent(response_type, {
        rio: props.rio || props.Río,
        nombre: props.nombre || props.Estación,
        condicion: props.condicion || props.status_text,
        aviso: props.aviso
      })
      // const content = (response_type == "tramo") ? `<strong>tramo</strong><br>${props.rio}<br>${props.nombre}<br>${props.condicion}` : `<strong>estación</strong><br>${props.Río}<br>${props.Estación}<br>${props.status_text}`
      document.getElementById('map-modal-content').innerHTML = content;
      if(props.status_color) {
        document.getElementById('map-modal').style.backgroundColor = props.status_color
      }
      document.getElementById('map-modal').style.display = 'block';
    }

    function createVectorSourceFromTable(table_id = "tabla-alturas") {
      const rows = document.querySelectorAll(`#${table_id} tbody tr`);
      const headers = Array.from(document.querySelectorAll(`#${table_id} thead th`)).map(th => th.textContent.trim());

      const features = Array.from(rows).map(row => {
        const x = parseFloat(row.dataset.x);
        const y = parseFloat(row.dataset.y);
        const id = row.dataset.id;
      
        const props = {
          series_id: row.dataset.series_id,
          status_color: row.dataset.status_color,
          status_text: row.dataset.status_text,
          percentil: row.dataset.percentil,
          tendencia: row.dataset.tendencia,
          aviso: row.dataset.aviso
        };
        row.querySelectorAll('td').forEach((td, i) => {
          const key = headers[i];
          const value = td.textContent.trim();
          props[key] = value;
        });

        return new ol.Feature({
          geometry: new ol.geom.Point(ol.proj.fromLonLat([x, y])),
          ...props,
          id: id
        });
      });

      return new ol.source.Vector({
        features: features
      });

    }

    async function queryWMSLayer(e, layer=wmsLayer, response_type="tramos") {
      const view = map.getView();
      const viewResolution = view.getResolution();
      const wmsSource = layer.getSource();  // Your TileWMS or ImageWMS source
    
      const url = wmsSource.getFeatureInfoUrl(
        e.coordinate,
        viewResolution,
        view.getProjection(),
        {
          'INFO_FORMAT': 'application/json',
          'QUERY_LAYERS': 'public2:tramos_condicion_params'
        }
      );

      const response = await fetch(url)
      if(response) {
        data = await response.json()
        if (data && data.features && data.features.length) {
          document.getElementById('map-modal').style.backgroundColor = null
          feature = data.features[0]
          console.log(feature.properties)
          const props = feature.properties;
          props.condicion = (response_type == "tramos") ? props.condicion : (props.estado && props.estado != "normal") ? props.estado : ""
          const content = mapPopupContent(response_type, props)
          // `<span style="font-style: italic;">río: </span>${props.rio}<br><span style="font-style: italic;">${feature_type}: </span>${props.nombre}<br><strong>${condicion}</strong>` 
          document.getElementById('map-modal-content').innerHTML = content;
          document.getElementById('map-modal').style.display = 'block';
          if(props.condicion) {
            document.getElementById('map-modal').style.backgroundColor = getStatusColor(props.condicion)
          }
        }
      }
    }

    function getStatusColor(condicion) {
        if(!condicion) {
            return "#ffffff"
        }
        if(condicion in status_colors) {
          return status_colors[condicion]
        } else {
          return "#ffffff"
        }
    }

    const status_colors = {
        "aguas altas": "#6fa8dc",
        "aguas medias altas": "#cfe2f3",
        "aguas medias": "#fff2cc",
        "aguas medias bajas": "#f6b26b",
        "aguas bajas": "#ea9999"
    }

  </script>
</body>

</html>